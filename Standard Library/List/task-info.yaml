type: edu
files:
- name: src/StandardLibrary.scala
  visible: true
  placeholders:
  - offset: 61
    length: 16
    placeholder_text: /*insert the correct condition for evaluating if the list is
      sorted*/
    initial_state:
      length: 69
      offset: 60
    initialized_from_dependency: false
    possible_answer: '(_: Int) < (_: Int)'
    selected: true
    status: Unchecked
  - offset: 142
    length: 30
    placeholder_text: // TODO
    initial_state:
      length: 7
      offset: 220
    initialized_from_dependency: false
    possible_answer: List.empty[Int]
    selected: true
    status: Unchecked
  text: |-
    object StandardLibrary{
      val cond: (Int, Int) => Boolean = /*insert the correct condition for evaluating if the list is sorted*/
      def insert(x: Int, xs: List[Int]): List[Int] =
        xs match {
          case List() => x :: // TODO
          case y :: ys =>
            if (cond(x, y)) x :: y :: ys
            else y :: insert(x, ys)
        }

      def main(args: Array[String]): Unit = {
        println(insert(4, 1::8::Nil))
      }
    }
  learner_created: false
- name: test/Test.scala
  visible: false
  text: |
    import StandardLibrary.insert
    import org.scalatest.Matchers
    import org.scalatest.refspec.RefSpec

    class Test extends RefSpec with Matchers {

      def `check insertion sort`(): Unit = {

        insert(2, 1 :: 3 :: Nil) shouldBe (1 :: 2 :: 3 :: Nil)
        insert(1, 2 :: 3 :: Nil) shouldBe (1 :: 2 :: 3 :: Nil)
        insert(3, 1 :: 2 :: Nil) shouldBe (1 :: 2 :: 3 :: Nil)
      }

    }
  learner_created: false
- name: build.sbt
  visible: false
  text: |2

    lazy val `List` = (project in file("."))
      .settings(
        scalaSource in Compile := baseDirectory.value / "src",
        scalaSource in Test := baseDirectory.value / "test",
        libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.5"
      )
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 30 Oct 2020 13:37:10 UTC
record: -1
