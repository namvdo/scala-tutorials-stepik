type: edu
files:
- name: src/StandardLibrary.scala
  visible: true
  placeholders:
  - offset: 60
    length: 90
    placeholder_text: /*map the successful results with triple()*/
    initial_state:
      length: 44
      offset: 130
    initialized_from_dependency: false
    possible_answer: x.right.map(triple)
    selected: true
    status: Solved
  text: |-
    object StandardLibrary{

      def triple(x: Int): Int = 3 * x

      def tripleEither(x: Either[String, Int]): Either[String, Int] =
        /*map the successful results with triple()*/

      def main(args: Array[String]): Unit = {
        println(tripleEither(Right(1)))
        println(tripleEither(Left("not a number")))
      }
    }
  learner_created: false
- name: test/Test.scala
  visible: false
  text: |
    import StandardLibrary.tripleEither
    import org.scalatest.Matchers
    import org.scalatest.refspec.RefSpec

    class Test extends RefSpec with Matchers{

      def `check insertion sort`(): Unit = {

        tripleEither(Right(2)) shouldBe (Right[String, Int](6): Either[String, Int])
        tripleEither(Left("not a number")) shouldBe (Left[String, Int]("not a number"): Either[String, Int])

      }
    }
  learner_created: false
- name: build.sbt
  visible: false
  text: |2

    lazy val `Error-Handling` = (project in file("."))
      .settings(
        scalaSource in Compile := baseDirectory.value / "src",
        scalaSource in Test := baseDirectory.value / "test",
        libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.5"
      )
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 31 Oct 2020 01:58:01 UTC
record: -1
