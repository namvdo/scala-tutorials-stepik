type: edu
files:
- name: build.sbt
  visible: false
  text: |2

    lazy val `Type-Bounds` = (project in file("."))
      .settings(
        scalaSource in Compile := baseDirectory.value / "src",
        scalaSource in Test := baseDirectory.value / "test",
        libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.5"
      )
  learner_created: false
- name: test/Test.scala
  visible: false
  text: |
    import TypeBounds.{Animal, Mammal, Reptile, Zebra, selection}
    import org.scalatest.Matchers
    import org.scalatest.refspec.RefSpec

    class Test extends RefSpec with Matchers{

      def `size exercise`(): Unit = {
        //Arrange
        val unknownAnimal = new Animal
        val reptile = new Reptile
        val mammal = new Mammal
        val zebra = new Zebra

        //Assert
        selection(unknownAnimal) shouldBe unknownAnimal
        selection(reptile) shouldBe reptile
        selection(mammal) shouldBe mammal
        selection(zebra) shouldBe zebra
      }
    }
  learner_created: false
- name: src/TypeBounds.scala
  visible: true
  placeholders:
  - offset: 149
    length: 9
    placeholder_text: /*insert a correct lower bound Type to include Zebra*/
    initial_state:
      length: 54
      offset: 149
    initialized_from_dependency: false
    possible_answer: Zebra
    selected: true
    status: Solved
  - offset: 153
    length: 12
    placeholder_text: /*insert an upper bound type to include Animal*/
    initial_state:
      length: 48
      offset: 207
    initialized_from_dependency: false
    possible_answer: Animal
    selected: true
    status: Solved
  text: |-
    object TypeBounds{
      class Animal

      class Reptile extends Animal

      class Mammal extends Animal

      class Zebra extends Mammal

      def selection[A >: /*insert a correct lower bound Type to include Zebra*/ <: /*insert an upper bound type to include Animal*/](a: A): A =
        a

      val unknownAnimal = new Animal
      val reptile = new Reptile
      val mammal = new Mammal
      val zebra = new Zebra

      def main(args: Array[String]): Unit = {
        println(selection(unknownAnimal))
        println(selection(reptile ))
        println(selection(mammal))
        println(selection(zebra))
      }
    }
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 31 Oct 2020 10:25:49 UTC
record: -1
