type: edu
files:
- name: src/DefinitionsAndEvaluation.scala
  visible: true
  placeholders:
  - offset: 168
    length: 21
    placeholder_text: /*insert an expression using both parameters*/
    initial_state:
      length: 46
      offset: 174
    initialized_from_dependency: false
    possible_answer: base * height
    selected: true
    status: Unchecked
  text: |-
    import org.scalatest.{FlatSpec, Matchers}

    object DefinitionsAndEvaluation extends FlatSpec with Matchers {

      def triangleArea(base: Double, height: Double): Double =
          /*insert an expression using both parameters*/ / 2.0

      def main(args: Array[String]): Unit = {
        println(triangleArea(3, 6))
      }
    }
  learner_created: false
- name: test/Test.scala
  visible: false
  text: |
    import DefinitionsAndEvaluation.triangleArea
    import org.scalatest.refspec.RefSpec
    import org.scalatest.Matchers

    class Test extends RefSpec with Matchers {

      def `check triangle area`(): Unit = {
        triangleArea(3, 4) shouldBe 6.0
        triangleArea(5, 6) shouldBe 15.0
      }

    }
  learner_created: false
- name: build.sbt
  visible: false
  text: |2

    lazy val `Multiple-Parameters` = (project in file("."))
      .settings(
        scalaSource in Compile := baseDirectory.value / "src",
        scalaSource in Test := baseDirectory.value / "test",
        libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.5"
      )
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 30 Oct 2020 11:33:58 UTC
record: -1
