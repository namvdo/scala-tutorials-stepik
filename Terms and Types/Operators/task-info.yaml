type: edu
files:
- name: src/TermsAndTypes.scala
  visible: true
  placeholders:
  - offset: 75
    length: 0
    placeholder_text: //insert the upper boundary of the range here, it should be
      of an appropriate type
    initial_state:
      length: 82
      offset: 73
    initialized_from_dependency: false
    possible_answer: 5
    selected: true
    status: Unchecked
  text: |-
    object TermsAndTypes {

      def staticTyping(): Range.Inclusive =
        1 to //insert the upper boundary of the range here, it should be of an appropriate type

      def main(args: Array[String]): Unit = {
        println(staticTyping())
      }
    }
  learner_created: false
- name: test/Test.scala
  visible: false
  text: |
    import org.scalatest.refspec.RefSpec

    class Test extends RefSpec {

      def `check static typing`(): Unit = {
        withClue("There is an Error, as you need to put an integer as the end of range.") {
          assertCompiles("TermsAndTypes.staticTyping()")
        }
      }
    }
  learner_created: false
- name: build.sbt
  visible: false
  text: |2

    lazy val `Operators` = (project in file("."))
      .settings(
        scalaSource in Compile := baseDirectory.value / "src",
        scalaSource in Test := baseDirectory.value / "test",
        libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.5"
      )
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 30 Oct 2020 11:19:20 UTC
record: -1
