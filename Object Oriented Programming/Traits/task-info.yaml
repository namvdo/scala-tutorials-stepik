type: edu
files:
- name: build.sbt
  visible: false
  text: |2

    lazy val `Traits` = (project in file("."))
      .settings(
        scalaSource in Compile := baseDirectory.value / "src",
        scalaSource in Test := baseDirectory.value / "test",
        libraryDependencies += "org.scalatest" %% "scalatest" % "3.0.5"
      )
  learner_created: false
- name: src/ObjectOrientedProgramming.scala
  visible: true
  placeholders:
  - offset: 397
    length: 0
    placeholder_text: /*insert an appropriate expression*/
    initial_state:
      length: 36
      offset: 392
    initialized_from_dependency: false
    possible_answer: x * y
    selected: true
    status: Solved
  - offset: 487
    length: 0
    placeholder_text: /*insert an appropriate expression*/
    initial_state:
      length: 36
      offset: 513
    initialized_from_dependency: false
    possible_answer: x + y
    selected: false
    status: Solved
  text: |-
    import org.scalatest.{FlatSpec, Matchers}

    object ObjectOrientedProgramming{
        abstract class Reducer(init: Int) {
          def combine(x: Int, y: Int): Int
          def reduce(xs: List[Int]): Int =
            xs match {
              case Nil     => init
              case y :: ys => combine(y, reduce(ys))
            }
        }

        object Product extends Reducer(1) {
          def combine(x: Int, y: Int): Int = /*insert an appropriate expression*/
        }

        object Sum extends Reducer(0) {
          def combine(x: Int, y: Int): Int = /*insert an appropriate expression*/
        }

        val nums = List(1, 2, 3, 4)

      def main(args: Array[String]): Unit = {
        println(Product.reduce(nums))
        println(Sum.reduce(nums))
      }
    }
  learner_created: false
- name: test/Test.scala
  visible: false
  text: |
    import ObjectOrientedProgramming.{Product, Sum}
    import org.scalatest.Matchers
    import org.scalatest.refspec.RefSpec

    class Test extends RefSpec with Matchers{

      def `test reducer`(): Unit = {

        val nums = List(1, 2, 3, 4)

        Product.reduce(nums) shouldBe 24
        Sum.reduce(nums) shouldBe 10
      }
    }
  learner_created: false
- name: scala_type_hierarchy.png
  visible: false
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 31 Oct 2020 09:15:54 UTC
record: -1
